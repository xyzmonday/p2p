<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yff.base.mapper.MoneyWithDrawMapper">
    <resultMap id="BaseResultMap" type="com.yff.base.domain.MoneyWithDraw">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="account_name" jdbcType="VARCHAR" property="accountName"/>
        <result column="account_number" jdbcType="VARCHAR" property="accountNumber"/>
        <result column="bank_name" jdbcType="VARCHAR" property="bankName"/>
        <result column="bank_fork_name" jdbcType="VARCHAR" property="bankForkName"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="state" jdbcType="TINYINT" property="state"/>
        <result column="charge" jdbcType="DECIMAL" property="charge"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="audit_time" jdbcType="TIMESTAMP" property="auditTime"/>
        <result column="apply_time" jdbcType="TIMESTAMP" property="applyTime"/>
        <!--  <result column="applier_id" jdbcType="BIGINT" property="applierId" />
          <result column="auditor_id" jdbcType="BIGINT" property="auditorId" />-->

        <!--申请人-->
        <association property="applier" javaType="com.yff.base.domain.LoginInfo" columnPrefix="ap_">
            <id property="id" column="id"></id>
            <result property="username" column="username"></result>
        </association>
        <!--审核人-->
        <association property="auditor" javaType="com.yff.base.domain.LoginInfo" columnPrefix="au_">
            <id property="id" column="id"></id>
            <result property="username" column="username"></result>
        </association>
    </resultMap>
    <sql id="Base_Column_List">
    m.id, m.account_name, m.account_number, m.bank_name, m.bank_fork_name, m.amount, m.state, m.charge,
    m.remark, m.audit_time, m.apply_time, ap.id as ap_id,ap.username as ap_username,au.id as au_id,
    au.username as au_username
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from money_with_draw m
        INNER JOIN login_info ap ON m.applier_id = ap.id
        LEFT JOIN login_info au ON m.auditor_id = au.id
        where m.id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from money_with_draw
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.yff.base.domain.MoneyWithDraw"
            useGeneratedKeys="true">
    insert into money_with_draw (account_name, account_number, bank_name, 
      bank_fork_name, amount, state, 
      charge, remark, audit_time, 
      apply_time, applier_id, auditor_id
      )
    values (#{accountName,jdbcType=VARCHAR}, #{accountNumber,jdbcType=VARCHAR}, #{bankName,jdbcType=VARCHAR}, 
      #{bankForkName,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, #{state,jdbcType=TINYINT}, 
      #{charge,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR}, #{auditTime,jdbcType=TIMESTAMP}, 
      #{applyTime,jdbcType=TIMESTAMP}, #{applier.id,jdbcType=BIGINT}, #{auditor.id,jdbcType=BIGINT}
      )
  </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.yff.base.domain.MoneyWithDraw"
            useGeneratedKeys="true">
        insert into money_with_draw
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="accountName != null">
                account_name,
            </if>
            <if test="accountNumber != null">
                account_number,
            </if>
            <if test="bankName != null">
                bank_name,
            </if>
            <if test="bankForkName != null">
                bank_fork_name,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="charge != null">
                charge,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="auditTime != null">
                audit_time,
            </if>
            <if test="applyTime != null">
                apply_time,
            </if>
            <if test="applier != null and applier.id != null">
                applier_id,
            </if>
            <if test="auditor != null and auditor.id != null">
                auditor_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="accountName != null">
                #{accountName,jdbcType=VARCHAR},
            </if>
            <if test="accountNumber != null">
                #{accountNumber,jdbcType=VARCHAR},
            </if>
            <if test="bankName != null">
                #{bankName,jdbcType=VARCHAR},
            </if>
            <if test="bankForkName != null">
                #{bankForkName,jdbcType=VARCHAR},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DECIMAL},
            </if>
            <if test="state != null">
                #{state,jdbcType=TINYINT},
            </if>
            <if test="charge != null">
                #{charge,jdbcType=DECIMAL},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="auditTime != null">
                #{auditTime,jdbcType=TIMESTAMP},
            </if>
            <if test="applyTime != null">
                #{applyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="applier != null and applier.id != null">
                #{applier.id,jdbcType=BIGINT},
            </if>
            <if test="auditor != null and auditor.id != null">
                #{auditor.id,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yff.base.domain.MoneyWithDraw">
        update money_with_draw
        <set>
            <if test="accountName != null">
                account_name = #{accountName,jdbcType=VARCHAR},
            </if>
            <if test="accountNumber != null">
                account_number = #{accountNumber,jdbcType=VARCHAR},
            </if>
            <if test="bankName != null">
                bank_name = #{bankName,jdbcType=VARCHAR},
            </if>
            <if test="bankForkName != null">
                bank_fork_name = #{bankForkName,jdbcType=VARCHAR},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DECIMAL},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=TINYINT},
            </if>
            <if test="charge != null">
                charge = #{charge,jdbcType=DECIMAL},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="auditTime != null">
                audit_time = #{auditTime,jdbcType=TIMESTAMP},
            </if>
            <if test="applyTime != null">
                apply_time = #{applyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="applier != null and applier.id != null">
                applier_id = #{applier.id,jdbcType=BIGINT},
            </if>
            <if test="auditor != null and auditor.id != null">
                auditor_id = #{auditor.id,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yff.base.domain.MoneyWithDraw">
    update money_with_draw
    set account_name = #{accountName,jdbcType=VARCHAR},
      account_number = #{accountNumber,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_fork_name = #{bankForkName,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      state = #{state,jdbcType=TINYINT},
      charge = #{charge,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      audit_time = #{auditTime,jdbcType=TIMESTAMP},
      apply_time = #{applyTime,jdbcType=TIMESTAMP},
      applier_id = #{applier.id,jdbcType=BIGINT},
      auditor_id = #{auditor.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>


    <sql id="condition">
        <where>
            <if test="state>-1">
                AND f.state = #{state}
            </if>
            <if test="beginDate!=null">
                AND f.apply_time &gt;= #{beginDate}
            </if>
            <if test="endDate!=null">
                AND f.apply_time &lt;= #{endDate}
            </if>
        </where>
    </sql>

    <select id="queryByPageCondition" parameterType="com.yff.base.query.UserFileQueryObject" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from money_with_draw m
        INNER JOIN login_info ap ON m.applier_id = ap.id
        LEFT JOIN login_info au ON m.auditor_id = au.id
        <include refid="condition"/>
    </select>
</mapper>